<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"></xsd:import>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"></xsd:element>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"></xsd:attribute>
              <xsd:attribute name="type" type="xsd:string"></xsd:attribute>
              <xsd:attribute name="mimetype" type="xsd:string"></xsd:attribute>
              <xsd:attribute ref="xml:space"></xsd:attribute>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"></xsd:attribute>
              <xsd:attribute name="name" type="xsd:string"></xsd:attribute>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"></xsd:element>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"></xsd:element>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"></xsd:attribute>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"></xsd:attribute>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"></xsd:attribute>
              <xsd:attribute ref="xml:space"></xsd:attribute>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"></xsd:element>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"></xsd:attribute>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="svgImageCollection1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="htmlOverviewDescription.HtmlTemplate.Template" xml:space="preserve">
    <value>&lt;div class="container"&gt;
	&lt;h2&gt;HTML &amp; CSS-based Desktop UIs&lt;/h2&gt;
	&lt;div class="text"&gt;Individual DevExpress WinForms controls allow you to apply your knowledge of HTML and CSS to desktop UI development.
This web-inspired technique helps you create a layout in HTML format, and customize the appearance settings, size, padding, and layout options of UI elements using CSS styles. No need to handle custom draw events or change numerous properties to modify a control to match the UI specification.&lt;/div&gt;
	&lt;div class="text"&gt;&lt;br&gt;This demo is a collection of samples that demonstrate HTML and CSS-based UIs created using DevExpress WinForms controls.&lt;/div&gt;
	&lt;h2&gt;HTML &amp; CSS in Action&lt;/h2&gt;
	&lt;div class="text"&gt;&lt;a href="dxdemo://Win/HTML/MainDemo/Lab" id="hRefLink"&gt;Lab demo&lt;/a&gt; – Shows how an HTML and CSS-based UI is built. You can modify the underlying source HTML and CSS code dynamically.&lt;br&gt;&lt;/div&gt;
	&lt;div class="text"&gt;&lt;a href="dxdemo://Win/HTML/MainDemo/Html/Text_Formatting.Semantics" id="hRefLink"&gt;HTML&lt;/a&gt; and &lt;a href="dxdemo://Win/HTML/MainDemo/Css/Colors_&amp;_Shadows.color" id="hRefLink"&gt;CSS&lt;/a&gt; – Demonstrate all supported HTML tags and CSS styles for UI design.&lt;br&gt;&lt;/div&gt;
	&lt;h2&gt;Real-world Demo&lt;/h2&gt;
	&lt;div class="text"&gt;&lt;a href="dxdemo://Win/ChatClientDemo" id="hRefLink"&gt;Chat Client&lt;/a&gt; – Illustrates HTML-CSS UI design in a real-world messenger application.&lt;/div&gt;
	&lt;h2&gt;Documentation&lt;/h2&gt;
	&lt;div class="text"&gt;
	&lt;a href="https://docs.devexpress.com/WindowsForms/403398/common-features/html-css-based-desktop-ui/html-tags?v=21.2&amp;p=netframework" id="hRefLink"&gt;HTML Tags&lt;/a&gt;
	&lt;/div&gt;
	&lt;br&gt;
	&lt;div class="text"&gt;
	&lt;a href="https://docs.devexpress.com/WindowsForms/403399/common-features/html-css-based-desktop-ui/css-styles?v=21.2&amp;p=netframework" id="hRefLink"&gt;CSS Styles&lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;</value>
  </data>
  <data name="htmlContentControl.HtmlTemplate.Styles" xml:space="preserve">
    <value>.container{
background-color:@Window;
display:flex;
flex-direction: column;
justify-content: space-between;
border-radius: 20px;
padding: 0px 30px 16px 30px;
border-style:solid;
border-width:1px;
border-color:@HideSelection;
color: @ControlText;
}
.avatarContainer{
 display: flex;
 margin-top:16px;
 margin-bottom:16px;   
}
.content-container{
 margin-top:10px;
 margin-bottom:10px;	
}
.avatar{
 width: 100px;
 height: 100px;
 border-radius:100px;
 border-style: solid;
 border-width: 1px;
 border-color: @HideSelection;
}
.field-container{
	display:flex;
	flex-direction:column;
	justify-content: space-between;
	flex-grow:1;
	flex-basis: 150px;
	padding-left:10px;
	padding-right:10px;
}
.with-left-Margin{
	margin-left:10px;
}
.with-bottom-margin{
	margin-bottom:10px;
}
.spacebetweenalign{
	justify-content: space-between;
}
.field-header{
 display:flex;
	justify-content: space-between;
}
.field-input{
	display:inline-block;
	padding: 5px;
    margin-top: 10px;
    margin-bottom: 10px;
    border-width: 1px;
    border-style: solid;
    border-color: @HideSelection;
    border-radius: 5px;
    color: @DisabledControl;
}
.button{
    display: inline-block;
    padding: 10px;
    margin-left: 10px;
    color: gray;
    background-color: @Window;
    border-width: 1px;
    border-style: solid;
    border-color: @HideSelection;
    border-radius: 5px;
    text-align: center;
}
.hint{
	color: @DisabledText;
	font-size:7.5pt;
}
.centered{
	align-self:center;
}
.button-width-70{
	width: 70px;
}
.signin-button{
	margin-left:0px;
	border-width:0px;
	width: 130px;
}
.button:hover {
	background-color: @DisabledText;
    color: @White;
    border-color: @DisabledControl;
}
.button-upload:hover {
	background-color: @Success;
}
.button-remove:hover {
	background-color: @Danger;
}
.separator{
	width:100%;
    height:1px;
    background-color:@HideSelection;
}
.bottom-bar{
	text-align:right;
}
.bottom-bar-button{
	background-color: @Blue;
	color: @Window;
	width:100px;	
}
.action-bar{
	margin-top:10px;
	display:flex;
	justify-content: space-between;
}
.text{
	display:inline-block;
	padding-bottom:10px;
}
.photo{
    width: 32px;
    height:32px;
}
</value>
  </data>
  <data name="htmlContentControl.HtmlTemplate.Template" xml:space="preserve">
    <value>&lt;div class="container"&gt;    
    &lt;div class="avatarContainer"&gt;       
        &lt;img src="employee" class="avatar"&gt;
        &lt;div id="uploadBtn" class="centered button button-upload button-width-70"&gt;Upload&lt;/div&gt;
        &lt;div id="removeBtn" class="centered button button-remove button-width-70"&gt;Remove&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="separator"&gt;&lt;/div&gt;
    &lt;div class="avatarContainer spacebetweenalign"&gt;
        &lt;div class="field-container"&gt;
        	&lt;div class="field-header"&gt;
        		&lt;b&gt;Display name&lt;/b&gt;&lt;b class="hint"&gt;Visible to other members&lt;/b&gt;
        	&lt;/div&gt;
        	&lt;input name="textEditDisplayName" class="field-input"/&gt;        	
        &lt;/div&gt;
    	
    	&lt;div class="field-container with-left-Margin"&gt;
            &lt;div class="field-header"&gt;
            	&lt;b&gt;Full name&lt;/b&gt;&lt;b class="hint"&gt;Not visible to other members&lt;/b&gt;
            &lt;/div&gt;
        	&lt;input name="textEditFullName" class="field-input"/&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="separator"&gt;&lt;/div&gt;
    &lt;div class="avatarContainer"&gt;
        &lt;div class="field-container"&gt;
        	&lt;div class="field-header"&gt;
        		&lt;b&gt;Email address&lt;/b&gt;&lt;b class="hint"&gt;To log in and receive notifications&lt;/b&gt;
        	&lt;/div&gt;
        	&lt;input name="textEditEmail" class="field-input"/&gt;
        &lt;/div&gt;
    	
    	&lt;div class="field-container with-left-Margin"&gt;
            &lt;div class="field-header"&gt;
            	&lt;b&gt;Phone number&lt;/b&gt;&lt;b class="hint"&gt;To receive notifications&lt;/b&gt;
            &lt;/div&gt;
        	&lt;input name="textEditPhone" class="field-input"/&gt;
        &lt;/div&gt;
    &lt;/div&gt;
	    &lt;div class="separator"&gt;&lt;/div&gt;
	&lt;div class="content-container"&gt;
		&lt;div&gt;
		&lt;h3&gt;Linked Accounts&lt;/h3&gt;&lt;span class="hint"&gt; We use this to let you sign in and populate your profile information&lt;/span&gt;
		&lt;div class="action-bar"&gt;
			&lt;div id="signInBtn" class="centered button signin-button"&gt;&lt;img id="signInBtn" class="photo" src="signin"&gt;&lt;div id="signInBtn" class="text"&gt;Sign in with Google&lt;/div&gt;&lt;/div&gt;
			&lt;div id="connectBtn" class="centered button button-width-70"&gt;Connect&lt;/div&gt;
	    &lt;/div&gt;
		&lt;/div&gt;		
		&lt;/div&gt;
		    &lt;div class="separator"&gt;&lt;/div&gt;
	&lt;div class="content-container"&gt;
		&lt;div class="action-bar"&gt;
		&lt;div&gt;
		&lt;h3&gt;Delete Account&lt;/h3&gt;&lt;span class="hint"&gt;You will lose all data if you delete your account&lt;/span&gt;
		&lt;/div&gt;
			&lt;div id="deleteBtn" class="centered button button-remove signin-button"&gt;&lt;b&gt;Delete account...&lt;/b&gt;&lt;/div&gt;
			&lt;/div&gt;		
	&lt;/div&gt;
	&lt;div class="separator with-bottom-margin"&gt;&lt;/div&gt;
	&lt;div class="bottom-bar"&gt;
    &lt;div id="saveBtn" class="centered button bottom-bar-button"&gt;Save Changes&lt;/div&gt;
		&lt;/div&gt;
&lt;/div&gt;</value>
  </data>
</root>